def linear_search(arr, target):
    for i in range(len(arr)):
        if arr[i] == target:
            return i
    return -1

def sentinel_linear_search(arr, target):
    n = len(arr)
    last = arr[-1]
    arr[-1] = target
    i = 0
    while arr[i] != target:
        i += 1
    arr[-1] = last
    if i < n - 1 or arr[n - 1] == target:
        return i
    return -1

def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    while left <= right:
        mid = (left + right) // 2
        if arr[mid] == target:
            return mid
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1

def fibonacci_search(arr, target):
    n = len(arr)
    fib_m_2 = 0
    fib_m_1 = 1
    fib = fib_m_1 + fib_m_2
    while fib < n:
        fib_m_2 = fib_m_1
        fib_m_1 = fib
        fib = fib_m_1 + fib_m_2
    offset = -1
    while fib > 1:
        i = min(offset + fib_m_2, n - 1)
        if arr[i] < target:
            fib = fib_m_1
            fib_m_1 = fib_m_2
            fib_m_2 = fib - fib_m_1
            offset = i
        elif arr[i] > target:
            fib = fib_m_2
            fib_m_1 -= fib_m_2
            fib_m_2 = fib - fib_m_1
        else:
            return i
    if fib_m_1 and arr[offset + 1] == target:
        return offset + 1
    return -1

arr = [10, 22, 35, 40, 45, 60, 80, 82, 85, 90]
target = 45

linear_result = linear_search(arr, target)
print(f"Linear Search: Element {target} is at index {linear_result}")

sentinel_result = sentinel_linear_search(arr, target)
print(f"Sentinel Linear Search: Element {target} is at index {sentinel_result}")

binary_result = binary_search(arr, target)
print(f"Binary Search: Element {target} is at index {binary_result}")

fibonacci_result = fibonacci_search(arr, target)
print(f"Fibonacci Search: Element {target} is at index {fibonacci_result}")
